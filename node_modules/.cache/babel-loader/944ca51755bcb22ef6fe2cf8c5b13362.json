{"ast":null,"code":"var _jsxFileName = \"/Users/aitor/Downloads/Github/imaqua/water-middleware-eye/src/context/MapContext.js\";\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nconst MapContext = React.createContext(\"\");\n\nfunction MapProvider(props) {\n  const updateMarkers = (layer, markersData) => {\n    layer.clearLayers();\n    markersData.forEach(marker => {\n      var greenIcon = new L.Icon({\n        iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${marker.color}.png`,\n        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        shadowSize: [41, 41]\n      });\n      L.marker(marker.latLng, {\n        title: marker.title,\n        icon: greenIcon\n      }).addTo(layer);\n    });\n  };\n\n  const addMarkers = data => {\n    if (Object.entries(data).length > 0 && data.constructor !== Object) {\n      console.log(data);\n      return data.map(item => {\n        return {\n          title: item.title,\n          color: item.color,\n          latLng: {\n            lat: item.geo.lat,\n            lng: item.geo.long\n          }\n        };\n      });\n    } else {\n      if (Object.entries(data).length > 0 && data.constructor === Object) {\n        return [{\n          title: data.title,\n          color: data.color,\n          latLng: {\n            lat: data.geo.latitude,\n            lng: data.geo.longitude\n          }\n        }];\n      }\n    }\n\n    return [];\n  };\n\n  return /*#__PURE__*/React.createElement(MapContext.Provider, {\n    value: {\n      addMarkers,\n      updateMarkers\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, props.children);\n}\n\nexport { MapProvider, MapContext };","map":{"version":3,"sources":["/Users/aitor/Downloads/Github/imaqua/water-middleware-eye/src/context/MapContext.js"],"names":["React","useEffect","useState","L","MapContext","createContext","MapProvider","props","updateMarkers","layer","markersData","clearLayers","forEach","marker","greenIcon","Icon","iconUrl","color","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","latLng","title","icon","addTo","addMarkers","data","Object","entries","length","constructor","console","log","map","item","lat","geo","lng","long","latitude","longitude","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,CAAP,MAAc,SAAd;AAEA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,CAAoB,EAApB,CAAnB;;AAEA,SAASC,WAAT,CAAsBC,KAAtB,EAA4B;AAExB,QAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC1CD,IAAAA,KAAK,CAACE,WAAN;AACAD,IAAAA,WAAW,CAACE,OAAZ,CAAoBC,MAAM,IAAI;AAC1B,UAAIC,SAAS,GAAG,IAAIX,CAAC,CAACY,IAAN,CAAW;AACvBC,QAAAA,OAAO,EAAG,6FAA4FH,MAAM,CAACI,KAAM,MAD5F;AAEvBC,QAAAA,SAAS,EAAE,+EAFY;AAGvBC,QAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAHa;AAIvBC,QAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAJW;AAKvBC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAC,EAAL,CALU;AAMvBC,QAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL;AANW,OAAX,CAAhB;AAQAnB,MAAAA,CAAC,CAACU,MAAF,CACIA,MAAM,CAACU,MADX,EAEI;AAAEC,QAAAA,KAAK,EAAEX,MAAM,CAACW,KAAhB;AAAuBC,QAAAA,IAAI,EAAEX;AAA7B,OAFJ,EAGEY,KAHF,CAGQjB,KAHR;AAIH,KAbD;AAcH,GAhBD;;AAkBA,QAAMkB,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAIC,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqBG,MAArB,GAA8B,CAA9B,IAAmCH,IAAI,CAACI,WAAL,KAAqBH,MAA5D,EAAmE;AAC/DI,MAAAA,OAAO,CAACC,GAAR,CAAaN,IAAb;AACA,aAAOA,IAAI,CAACO,GAAL,CAASC,IAAI,IAAI;AACpB,eAAO;AACHZ,UAAAA,KAAK,EAAEY,IAAI,CAACZ,KADT;AAEHP,UAAAA,KAAK,EAAEmB,IAAI,CAACnB,KAFT;AAGHM,UAAAA,MAAM,EAAC;AACHc,YAAAA,GAAG,EAAED,IAAI,CAACE,GAAL,CAASD,GADX;AAEHE,YAAAA,GAAG,EAAEH,IAAI,CAACE,GAAL,CAASE;AAFX;AAHJ,SAAP;AAQH,OATM,CAAP;AAUH,KAZD,MAaK;AACD,UAAIX,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqBG,MAArB,GAA8B,CAA9B,IAAmCH,IAAI,CAACI,WAAL,KAAqBH,MAA5D,EAAmE;AAC/D,eAAO,CAAC;AACJL,UAAAA,KAAK,EAAEI,IAAI,CAACJ,KADR;AAEJP,UAAAA,KAAK,EAAEW,IAAI,CAACX,KAFR;AAGJM,UAAAA,MAAM,EAAC;AACHc,YAAAA,GAAG,EAAET,IAAI,CAACU,GAAL,CAASG,QADX;AAEHF,YAAAA,GAAG,EAAEX,IAAI,CAACU,GAAL,CAASI;AAFX;AAHH,SAAD,CAAP;AAQH;AACJ;;AAED,WAAO,EAAP;AACH,GA5BD;;AA8BA,sBACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AACxBf,MAAAA,UADwB;AAExBnB,MAAAA;AAFwB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKD,KAAK,CAACoC,QAJX,CADJ;AAQH;;AAED,SAAQrC,WAAR,EAAoBF,UAApB","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport L from \"leaflet\";\n\nconst MapContext = React.createContext(\"\");\n\nfunction MapProvider (props){\n\n    const updateMarkers = (layer, markersData) => {\n        layer.clearLayers();\n        markersData.forEach(marker => {\n            var greenIcon = new L.Icon({\n                iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${marker.color}.png`,\n                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n                iconSize: [25, 41],\n                iconAnchor: [12, 41],\n                popupAnchor: [1, -34],\n                shadowSize: [41, 41]\n            });\n            L.marker(\n                marker.latLng,\n                { title: marker.title, icon: greenIcon }\n            ).addTo(layer);\n        });\n    };\n\n    const addMarkers = (data) => {\n        if (Object.entries(data).length > 0 && data.constructor !== Object){\n            console.log (data);\n            return data.map(item => {\n                return {\n                    title: item.title,\n                    color: item.color,\n                    latLng:{\n                        lat: item.geo.lat,\n                        lng: item.geo.long\n                    }\n                }\n            });\n        }\n        else {\n            if (Object.entries(data).length > 0 && data.constructor === Object){\n                return [{\n                    title: data.title,\n                    color: data.color,\n                    latLng:{\n                        lat: data.geo.latitude,\n                        lng: data.geo.longitude\n                    }\n                }];\n            }\n        }\n\n        return []\n    };\n\n    return (\n        <MapContext.Provider value={{\n            addMarkers,\n            updateMarkers\n        }}>\n            {props.children}\n        </MapContext.Provider>\n    )\n}\n\nexport {MapProvider,MapContext}"]},"metadata":{},"sourceType":"module"}